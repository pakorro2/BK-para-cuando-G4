{
  "openapi": "3.0.3",
  "info": {
    "title": "Para Cuando API Ver. 1.0",
    "description": "Objetivo del la API es que podamos autenticarnos para publicar ciertas\nencuestas y votarlas.   Específicamente hablamos de publicar eventos, conciertos y torneos en una\nfecha determinada haciendo que la comunidad decida dar su apoyo o no para\nque se realice.\n\nTenemos que idear la manera en que las personas puedan acceder a una\naplicación para que puedan compartir estas publicaciones en donde puedan\nvotar a favor de estas o en contra.\n\n Apartir de esta idea mostraremos todas las rutas a las que se podra acceder, que datos de entrada se esperan y que respuesta se puede esperar segun el endpoint.",
    "version": "0.1.9"
  },
  "servers": [
    {
      "url": "http://localhost:9000/api/v1",
      "description": "change this value to use in production"
    }
  ],
  "paths": {
    "/publications": {
      "get": {
        "tags": [
          "Publications"
        ],
        "summary": "Returns a list of publications filtered.",
        "description": "allows you to filter all publications",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "400": {
            "description": "Publications not found"
          }
        }
      },
      "post": {
        "tags": [
          "Publications"
        ],
        "summary": "Returns a list of publications.",
        "description": "allows you to filter all publications",
        "parameters": {
          "$ref": "#/components/schemas/Publication",
          "in": "body",
          "description": "ID of publication to return",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Publications not found"
          }
        }
      }
    },
    "/publications/{id}": {
      "get": {
        "tags": [
          "Publications"
        ],
        "summary": "Finds publications by ID",
        "description": "Returns a single publication",
        "operationId": "getPublicationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of publication to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "publication not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Publications"
        ],
        "summary": "Deletes a publication",
        "description": "delete a publication",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid publication value"
          }
        }
      }
    },
    "/publications/:publication_id/vote": {
      "post": {
        "tags": [
          "Publications"
        ],
        "summary": "create vote",
        "description": "create vote",
        "operationId": "createVote",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid publication value"
          }
        }
      }
    },
    "/publications-types": {
      "get": {
        "tags": [
          "Publications Types"
        ],
        "summary": "Returns a list of publications type.",
        "description": "allows you to filter all publications type",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationTypes"
                }
              }
            }
          }
        }
      }
    },
    "/publications-types/publication_type_id": {
      "get": {
        "tags": [
          "Publications Types"
        ],
        "summary": "Returns a single publication type By ID.",
        "description": "Returns a single publication type",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationTypes"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/:user_id": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logs user into the system",
        "description": "Authentication users",
        "consumes": [
          "application/json"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Correct Credentials!"
          },
          "400": {
            "description": "Missing Data"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        }
      }
    },
    "/auth/sign-up": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "signUp",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/token-info": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "tokenInfo",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "changePassword",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "username": {
            "type": "string",
            "example": "youUser"
          },
          "password": {
            "type": "string",
            "example": "xxxxxx"
          },
          "email_verified": {
            "type": "string",
            "format": "date-time",
            "example": "26/01/2023"
          },
          "token": {
            "type": "string"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Profiles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "role_id": {
            "type": "integer"
          },
          "country_id": {
            "type": "integer"
          },
          "image_url": {
            "type": "string"
          },
          "code_phone": {
            "type": "integer",
            "example": "52 --Code México"
          },
          "phone": {
            "type": "integer",
            "example": 8442904146
          }
        },
        "xml": {
          "name": "profile"
        }
      },
      "Countries": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "serial"
          },
          "name": {
            "type": "string",
            "example": "México"
          }
        },
        "xml": {
          "name": "countries"
        }
      },
      "State": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "serial"
          },
          "country_id": {
            "type": "integer",
            "format": "serial"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "states"
        }
      },
      "Cities": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "serial"
          },
          "state_id": {
            "type": "integer",
            "format": "serial"
          },
          "name": {
            "type": "string",
            "example": "Colima"
          }
        },
        "xml": {
          "name": "cities"
        }
      },
      "Roles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "serial"
          },
          "name": {
            "type": "string",
            "example": "public"
          }
        },
        "xml": {
          "name": "roles"
        }
      },
      "Publication": {
        "type": "object",
        "discriminator": {
          "propertyName": "petType"
        },
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "profile_id:": {
            "type": "string",
            "format": "uuid"
          },
          "publication_type_id": {
            "type": "integer",
            "format": "serial"
          },
          "city_id": {
            "type": "integer",
            "format": "serial"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "PublicationTypes": {
        "type": "object",
        "discriminator": {
          "propertyName": "petType"
        },
        "properties": {
          "id": {
            "type": "integer",
            "format": "serial"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "serial"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "pakorro2@gmail.com"
          },
          "password": {
            "type": "string"
          }
        }
      }
    }
  }
}